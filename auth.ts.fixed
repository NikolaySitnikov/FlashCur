// src/lib/auth.ts
import NextAuth from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'

/**
 * NextAuth Configuration for Development
 * 
 * This uses JWT strategy without a database.
 * For production with database:
 * 1. Import PrismaAdapter from '@auth/prisma-adapter'
 * 2. Import prisma client
 * 3. Add: adapter: PrismaAdapter(prisma)
 * 4. Ensure DATABASE_URL is set
 * 5. Change session strategy to 'database'
 */

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        // Validate credentials are provided
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        // Demo authentication for development
        // TODO: Replace with actual authentication logic:
        // - Call your backend API to verify user
        // - Query database with proper password hashing
        // - Integrate with OAuth providers (GitHub, Google, etc.)
        
        if (
          credentials.email === 'test@volspike.com' &&
          credentials.password === 'password'
        ) {
          return {
            id: '1',
            email: 'test@volspike.com',
            name: 'Test User',
          }
        }

        // Invalid credentials
        return null
      }
    })
  ],

  // Session configuration
  session: {
    strategy: 'jwt',  // Using JWT instead of database sessions
    maxAge: 30 * 24 * 60 * 60,  // 30 days
  },

  // JWT configuration
  jwt: {
    maxAge: 30 * 24 * 60 * 60,  // 30 days
  },

  // Authentication pages
  pages: {
    signIn: '/',  // Redirect to home page for login
    error: '/auth/error',
  },

  // Callbacks
  callbacks: {
    /**
     * JWT Callback
     * Called when JWT is created or updated
     * 
     * For database sessions, this is called after sign in
     * For JWT sessions, this adds user data to the token
     */
    async jwt({ token, user, trigger, session }) {
      // Add user ID to token when signing in
      if (user) {
        token.id = user.id
      }

      // Allow session updates
      if (trigger === 'update' && session) {
        token = { ...token, ...session }
      }

      return token
    },

    /**
     * Session Callback
     * Called whenever session is accessed via getSession() or useSession()
     * 
     * Add user data from JWT token to session object
     */
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id as string
      }
      return session
    },
  },

  // Event callbacks
  events: {
    async signIn({ user, account, profile, isNewUser }) {
      console.log(`[Auth] User signed in: ${user.email}`)
    },
    async signOut() {
      console.log('[Auth] User signed out')
    },
  },
})
